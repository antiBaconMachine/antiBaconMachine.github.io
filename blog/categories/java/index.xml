<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on This is not an ambulance</title>
    <link>https://antibaconmachine.github.io/blog/categories/java/</link>
    <description>Recent content in Java on This is not an ambulance</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>oliver.s.edwards@gmail.com (Ollie Edwards)</managingEditor>
    <webMaster>oliver.s.edwards@gmail.com (Ollie Edwards)</webMaster>
    <lastBuildDate>Tue, 27 May 2014 15:57:51 +0000</lastBuildDate>
    
	<atom:link href="https://antibaconmachine.github.io/blog/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Inlining grunt tasks</title>
      <link>https://antibaconmachine.github.io/blog/post/inlining-grunt-tasks/</link>
      <pubDate>Tue, 27 May 2014 15:57:51 +0000</pubDate>
      <author>oliver.s.edwards@gmail.com (Ollie Edwards)</author>
      <guid>https://antibaconmachine.github.io/blog/post/inlining-grunt-tasks/</guid>
      <description>Grunt config files can easily become very verbose and disparate with related tasks scattered far apart. Without careful organisation and maintenance they can become quite unwieldy. In this post I&amp;rsquo;ll discuss some of the ways I&amp;rsquo;ve been experimenting with to make gruntfiles terser and keep related components together. I&amp;rsquo;ll introduce the grunt-inline-task-sugar plugin which I created to implement some of the ideas discussed.
Anatomy of the alias task The grunt &amp;lsquo;alias&amp;rsquo; task type is probably familiar to you:</description>
    </item>
    
  </channel>
</rss>